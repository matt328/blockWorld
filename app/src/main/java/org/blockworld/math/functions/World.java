/**
 * WorldFunction Author: Matt Teeter May 18, 2012
 */
package org.blockworld.math.functions;

import org.blockworld.math.Interpolation;
import org.blockworld.math.Noise.NoiseType;

import com.google.common.base.MoreObjects;

/**
 * Composite function that generates the overall terrain data.<br>
 * <br>
 * The gradient function produces smooth values from 0 to 1 based in this case
 * on the Y-Axis input only.<br>
 * <br>
 * The ground turbulence function perturbs the gradient function with random
 * noise generated by the ground shape function (Perlin Noise). It takes the
 * smoothness produces by the gradient function and moves it up or down along
 * the Y-Axis alone, by an amount obtained by evaluating the ground shape
 * function at the same point. Evaluating at the same point ensures a smooth
 * continuous/coherent result rather than purely random heights at different
 * points.<br>
 * <br>
 * Produces values < 0 for air, and values > 0 for solid blocks.
 * 
 * @author Matt Teeter
 */
public class World implements Function {
   private Function finalFunction;
   private Selector groundSelector;
   private Function groundThresholdFunction;
   private Function groundTurbulence;

   public World() {

   }

   public World(final String seed, final float groundTurbulenceFactor, final Function groundThresholdFunction, final float shapeFrequency, final int shapeOctaves, final float scale) {
      this.groundThresholdFunction = groundThresholdFunction;
      final Function constNeg1 = new Constant(-1.0f);
      final Function const1 = new Constant(1.0f);
      final Function groundShape = new PerlinNoise(NoiseType.PERLIN, shapeFrequency, shapeOctaves, seed);

      final Function groundGradient = new Gradient(0.0f, 1.0f);

      groundTurbulence = new Turbulence(groundGradient, groundShape, groundTurbulenceFactor);

      groundSelector = new Selector(groundTurbulence, constNeg1, const1, 1.0f, 0.0f);
      finalFunction = new ScalePoint(groundSelector, scale);
   }

   /*
    * (non-Javadoc)
    * @see org.blockworld.math.functions.Function#get(float, float, float)
    */
   @Override
   public final float get(final float x, final float y, final float z) {
      float threshold = groundThresholdFunction.get(x, y, z);
      threshold = Interpolation.translate(threshold, -1.0f, 1.0f, 0.0f, 8.0f);
      groundSelector.setThreshold(threshold);
      return finalFunction.get(x, y, z);
   }

   public Function getFinalFunction() {
      return finalFunction;
   }

   public void setFinalFunction(final Function finalFunction) {
      this.finalFunction = finalFunction;
   }

   public Selector getGroundSelector() {
      return groundSelector;
   }

   public void setGroundSelector(final Selector groundSelector) {
      this.groundSelector = groundSelector;
   }

   public Function getGroundThresholdFunction() {
      return groundThresholdFunction;
   }

   public void setGroundThresholdFunction(final Function groundThresholdFunction) {
      this.groundThresholdFunction = groundThresholdFunction;
   }

   public Function getGroundTurbulence() {
      return groundTurbulence;
   }

   public void setGroundTurbulence(final Function groundTurbulence) {
      this.groundTurbulence = groundTurbulence;
   }

   @Override
   public String toString() {
      return MoreObjects.toStringHelper(this)
      .add("super", super.toString())
      .add("finalFunction", finalFunction)
      .add("groundSelector", groundSelector)
      .add("groundThresholdFunction", groundThresholdFunction)
      .add("groundTurbulence", groundTurbulence)
      .toString();
   }

}
